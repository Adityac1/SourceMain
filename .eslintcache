[{"D:\\React\\react-training\\react-sourcing-proj\\src\\index.js":"1","D:\\React\\react-training\\react-sourcing-proj\\src\\reportWebVitals.js":"2","D:\\React\\react-training\\react-sourcing-proj\\src\\App.js":"3","D:\\React\\react-training\\react-sourcing-proj\\src\\pages\\sourcing\\sourcing.js":"4","D:\\React\\react-training\\react-sourcing-proj\\src\\components\\Sidebar.js":"5","D:\\React\\react-training\\react-sourcing-proj\\src\\pages\\sourcing\\sourcingnode.js":"6","D:\\React\\react-training\\react-sourcing-proj\\src\\pages\\sourcing\\Sourcingrules.js":"7","D:\\React\\react-training\\react-sourcing-proj\\src\\pages\\Home.js":"8","D:\\React\\react-training\\react-sourcing-proj\\src\\pages\\Reports.js":"9","D:\\React\\react-training\\react-sourcing-proj\\src\\pages\\sourcing\\sourcingconfig.js":"10","D:\\React\\react-training\\react-sourcing-proj\\src\\utils.js":"11","D:\\React\\react-training\\react-sourcing-proj\\src\\pages\\sourcing\\Sourcinruledetails.js":"12","D:\\React\\react-training\\react-sourcing-proj\\src\\pages\\sourcing\\SourcingRuleSeqDetails.js":"13","D:\\React\\react-training\\react-sourcing-proj\\src\\components\\SidebarData.js":"14","D:\\React\\react-training\\react-sourcing-proj\\src\\components\\SubMenu.js":"15","D:\\React\\react-training\\react-sourcing-proj\\src\\components\\SearchBar.js":"16","D:\\React\\react-training\\react-sourcing-proj\\src\\components\\Spinner.js":"17","D:\\React\\react-training\\react-sourcing-proj\\src\\components\\Chart.js":"18","D:\\React\\react-training\\react-sourcing-proj\\src\\components\\Animation.js":"19","D:\\React\\react-training\\react-sourcing-proj\\src\\components\\Accordion.js":"20"},{"size":500,"mtime":1616009414625,"results":"21","hashOfConfig":"22"},{"size":362,"mtime":1606676707000,"results":"23","hashOfConfig":"22"},{"size":1137,"mtime":1622111535246,"results":"24","hashOfConfig":"22"},{"size":1812,"mtime":1622639038466,"results":"25","hashOfConfig":"22"},{"size":2354,"mtime":1622630249586,"results":"26","hashOfConfig":"22"},{"size":15617,"mtime":1622701220796,"results":"27","hashOfConfig":"22"},{"size":4388,"mtime":1622626176681,"results":"28","hashOfConfig":"22"},{"size":1043,"mtime":1622608196178,"results":"29","hashOfConfig":"22"},{"size":531,"mtime":1614028135072,"results":"30","hashOfConfig":"22"},{"size":6589,"mtime":1622437447369,"results":"31","hashOfConfig":"22"},{"size":121,"mtime":1618911856565,"results":"32","hashOfConfig":"22"},{"size":7830,"mtime":1622732186901,"results":"33","hashOfConfig":"22"},{"size":14232,"mtime":1622604469137,"results":"34","hashOfConfig":"22"},{"size":1940,"mtime":1621052619026,"results":"35","hashOfConfig":"22"},{"size":1604,"mtime":1622700979158,"results":"36","hashOfConfig":"22"},{"size":665,"mtime":1622630184797,"results":"37","hashOfConfig":"22"},{"size":330,"mtime":1619019303345,"results":"38","hashOfConfig":"22"},{"size":649,"mtime":1616696186017,"results":"39","hashOfConfig":"22"},{"size":2181,"mtime":1622621032140,"results":"40","hashOfConfig":"22"},{"size":2315,"mtime":1622732625181,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"1qf7163",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"44"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"44"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"44"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"44"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"44"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"44"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"44"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\React\\react-training\\react-sourcing-proj\\src\\index.js",[],["91","92"],"D:\\React\\react-training\\react-sourcing-proj\\src\\reportWebVitals.js",[],"D:\\React\\react-training\\react-sourcing-proj\\src\\App.js",["93","94","95"],"import './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Sidebar from './components/Sidebar';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Home from './pages/Home';\nimport { Reports, ReportsOne, ReportsTwo, ReportsThree } from './pages/Reports';\nimport { sourcing } from './pages/sourcing/sourcing';\nimport { sourcingconfig } from \"./pages/sourcing/sourcingconfig\";\nimport {sourcingnode} from \"./pages/sourcing/sourcingnode\";\nimport {Sourcingrules} from \"./pages/sourcing/Sourcingrules\";\n\n\n\nfunction App() {\n  return (\n    <div className='maindev'>\n    <Router>\n      <Sidebar />\n      <Switch>\n        <Route path='/home' exact component={Home} />\n        <Route path='/sourcing' exact component={sourcing} />\n        <Route path='/sourcing/sourcingconfig' exact component={sourcingconfig} />\n        <Route path='/sourcing/nodes' exact component={sourcingnode} />\n        <Route path='/sourcing/rules' exact component={Sourcingrules } />\n        <Route path='/reports/reports3' exact component={ReportsThree} />\n      </Switch>\n    </Router>\n    </div>\n  );\n}\n\nexport default App;\n","D:\\React\\react-training\\react-sourcing-proj\\src\\pages\\sourcing\\sourcing.js",["96","97","98","99"],"import React, { Component } from 'react'\r\nimport { API } from '../../utils';\r\nimport './sourcing.css';\r\nimport { Sourcinruledetails } from \"./Sourcinruledetails\";\r\nimport { Sourcingrules } from \"./Sourcingrules\";\r\nimport { SourcingRuleSeqDetails } from \"./SourcingRuleSeqDetails\";\r\n\r\n\r\nexport class sourcing extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            ruleDetailsScreen:false,\r\n            ruleListScreen:true,\r\n            show: false,\r\n            screen:\"Sourcingrules\",\r\n            displayDetails:[],\r\n            displayData:[]\r\n        }\r\n        this.openRuleDetails = this.openRuleDetails.bind(this);\r\n        this.openRulesScreen = this.openRulesScreen.bind(this);\r\n        this.addSeq = this.addSeq.bind(this);\r\n    }\r\n    openRuleDetails(rule){\r\n       this.setState({\r\n           screen:\"Sourcinruledetails\",\r\n           displayDetails:rule,\r\n           details:rule\r\n       })\r\n    }\r\n    openRulesScreen(parms){\r\n        this.setState({\r\n            screen:\"Sourcingrules\"\r\n        })\r\n     }\r\n     addSeq(ruleid){\r\n        this.setState({\r\n            screen:\"SourcingRuleSeqDetails\"\r\n        }) \r\n     }\r\n    render() {\r\n        return (\r\n        <>\r\n        {this.state.screen==\"Sourcinruledetails\" && <Sourcinruledetails openRulesFun={this.openRulesScreen} addSeqFun={this.addSeq} displayData={this.state.displayDetails} openRuleDetailsFun={this.openRuleDetails}/>}\r\n        {this.state.screen==\"Sourcingrules\" && <Sourcingrules openRuleDetailsFun={this.openRuleDetails} displayData={this.displayData}/>}\r\n        {this.state.screen==\"SourcingRuleSeqDetails\" && <SourcingRuleSeqDetails openRuleDetailsFun={this.openRuleDetails} addSeqFun={this.addSeq} displayData={this.state.displayDetails}/>}\r\n        </>\r\n        )\r\n    }\r\n\r\n\r\n}","D:\\React\\react-training\\react-sourcing-proj\\src\\components\\Sidebar.js",["100"],"import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport * as FaIcons from 'react-icons/fa';\nimport * as AiIcons from 'react-icons/ai';\nimport { SidebarData } from './SidebarData';\nimport SubMenu from './SubMenu';\nimport { IconContext } from 'react-icons/lib';\nimport * as CgIcons from 'react-icons/cg'\nimport SearchBar from './SearchBar';\nconst Nav = styled.div`\n  background: #15171c;\n  height: 80px;\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n`;\n\nconst NavIcon = styled(Link)`\n  margin-left: 2rem;\n  font-size: 2rem;\n  height: 80px;\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n`;\n\nconst SidebarNav = styled.nav`\n  background: #15171c;\n  width: 250px;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  position: fixed;\n  top: 0;\n  left: ${({ sidebar }) => (sidebar ? '0' : '-100%')};\n  transition: 350ms;\n  z-index: 10;\n`;\n\nconst SidebarWrap = styled.div`\n  width: 100%;\n`;\n\nconst Sidebar = () => {\n  const [sidebar, setSidebar] = useState(false);\n\n  const showSidebar = () => setSidebar(!sidebar);\n\n\n\n  return (\n    <>\n\n      <IconContext.Provider value={{ color: '#fff' }}>\n        <Nav>\n          <div>\n            <NavIcon to='#'>\n              <FaIcons.FaBars className=\"controlBarIcon\" onClick={showSidebar} />\n            </NavIcon>\n          </div>\n          <div style={{\n            position: \"absolute\",\n            right: \"23%\",\n            top: \"5%\",\n          }}>\n            {/* <SearchBar /> */}\n          </div>\n\n          <div style={{\n            position: \"absolute\",\n            right: \"0%\",\n            top: \"0%\",\n          }}>\n            <NavIcon to='#'>\n              {/* <AiIcons.AiOutlineSearch /> */}\n              <CgIcons.CgProfile className=\"controlBarIcon\" onClick={showSidebar} />\n            </NavIcon>\n          </div>\n        </Nav>\n        <SidebarNav sidebar={sidebar}>\n          <SidebarWrap>\n            <NavIcon to='#'>\n              <AiIcons.AiOutlineClose onClick={showSidebar} />\n            </NavIcon>\n            {SidebarData.map((item, index) => {\n              return <SubMenu item={item} key={index} onClickFun={showSidebar} />;\n            })}\n          </SidebarWrap>\n        </SidebarNav>\n      </IconContext.Provider>\n    </>\n  );\n};\n\nexport default Sidebar;\n","D:\\React\\react-training\\react-sourcing-proj\\src\\pages\\sourcing\\sourcingnode.js",["101","102","103","104","105"],"import React, { Component } from 'react'\r\nimport { API } from '../../utils';\r\nimport './sourcing.css';\r\nimport { Card, Button, Row, Col, Table, Modal } from 'react-bootstrap';\r\nimport { Spinner } from '../../components/Spinner';\r\nimport { DataGrid } from '@material-ui/data-grid';\r\n\r\nconst nodeColumns = [{ field: 'node_id', headerName: 'Node ID', width: 200 },\r\n{ field: 'description', headerName: 'Node Description', width: 400 },\r\n{ field: 'is_active', headerName: 'Is Active?', width: 200 },];\r\n\r\nexport class sourcingnode extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            loading: false,\r\n            show: false,\r\n            nodes: [],\r\n            node_id: \"\",\r\n            org_code: \"\",\r\n            description: \"\",\r\n            node_type: \"\",\r\n            zipcode: \"\",\r\n            longitude: \"\",\r\n            latitude: \"\",\r\n            is_shipping_enabled: \"\",\r\n            is_pickup_enabled: \"\",\r\n            is_big_store: \"\",\r\n            is_shut_down: \"\",\r\n            is_active: \"\",\r\n            modal: {\r\n                header: \"Update Node Details\",\r\n                update: false,\r\n                data: {}\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        fetch(\"http://localhost:8084/sourcing/v1/shipnodes/PERF_DEFAULT\",\r\n            {\r\n                method: 'GET',\r\n                headers: {\r\n                    mode: 'no-cors',\r\n                    Accept: 'application/json',\r\n                    'Access-Control-Allow-Origin': '*',\r\n                    Host: 'example.com',\r\n                    Origin: 'http://localhost:3000/',\r\n                    'Content-Type': 'application/json',\r\n                    'Access-Control-Allow-Methods': 'GET, POST',\r\n                },\r\n            })\r\n            .then(res => res.json())\r\n            .then(result => {\r\n                if (result.length > 0) {\r\n                    console.log(\"get call is successful\" + result);\r\n                    this.setState({\r\n                        nodes: result\r\n                    })\r\n                }\r\n            })\r\n            .catch(error => console.log(error))\r\n\r\n    }\r\n    addNode() {\r\n        this.setState({\r\n            modal: {\r\n                data: {},\r\n                update: false,\r\n                header: \"Add Node\"\r\n            }\r\n        })\r\n        this.handalShow();\r\n    }\r\n\r\n    updateNode() {\r\n\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            body: JSON.stringify([{\r\n                node_id: this.selectedData.node_id,\r\n                description: this.selectedData.description,\r\n                zipcode: this.selectedData.zipcode,\r\n                longitude: this.selectedData.latitude,\r\n                latitude: this.selectedData.longitude,\r\n                is_shipping_enabled: this.selectedData.is_shipping_enabled,\r\n                is_pickup_enabled: this.selectedData.is_pickup_enabled,\r\n                is_shut_down: this.selectedData.is_shut_down,\r\n                is_active: this.selectedData.is_active,\r\n                org_code: 'PERF_DEFAULT'\r\n            }]),\r\n\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Accept: 'application/json',\r\n            }\r\n\r\n        };\r\n        fetch('http://localhost:8084/sourcing/v1/shipnode', requestOptions)\r\n            .then(response => {\r\n                const isJson = response.headers.get('content-type')?.includes('application/json');\r\n                const data = isJson && response.json();\r\n\r\n                // check for error response\r\n                if (!response.ok) {\r\n                    // get error message from body or default to response status\r\n                    const error = (data && data.message) || response.status;\r\n                    console.log(error.response)\r\n                    return Promise.reject(error);\r\n                } else {\r\n                    this.handalClose();\r\n                }\r\n            })\r\n            .catch(error => {\r\n                this.setState({ errorMessage: error.toString() });\r\n                console.error('There was an error!', error);\r\n            });\r\n\r\n    }\r\n    deleteNode() {\r\n        let delUrl = \"http://localhost:8084/sourcing/v1/shipnode/\" + this.selectedData.node_id + \"?orgCode=\" + this.selectedData.org_code;\r\n        const requestOptions = {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Accept: 'application/json',\r\n            }\r\n\r\n        };\r\n        fetch(delUrl, requestOptions)\r\n            .then(response => {\r\n                const isJson = response.headers.get('content-type')?.includes('application/json');\r\n                const data = isJson && response.json();\r\n\r\n                // check for error response\r\n                if (!response.ok) {\r\n                    // get error message from body or default to response status\r\n                    const error = (data && data.message) || response.status;\r\n                    console.log(error.response)\r\n                    return Promise.reject(error);\r\n                } else {\r\n                    this.handalClose();\r\n                }\r\n            })\r\n            .catch(error => {\r\n                this.setState({ errorMessage: error.toString() });\r\n                console.error('There was an error!', error);\r\n            });\r\n    }\r\n    handalClose() {\r\n        this.setState({\r\n            show: false\r\n        })\r\n    }\r\n    handalShow() {\r\n        this.setState({\r\n            show: true\r\n        })\r\n    }\r\n    onChangeHandler = e => {\r\n\r\n        let value = \"\";\r\n\r\n        if (e.target.type == \"checkbox\") {\r\n            value = e.target.defaultChecked;\r\n        } else {\r\n            value = e.target.value;\r\n        };\r\n        if (this.selectedData) {\r\n            this.selectedData[e.target.name] = value;\r\n        } else {\r\n            this.state.nodes[0][e.target.name] = value;\r\n        }\r\n        this.setState({\r\n            // [e.target.name]: value,\r\n\r\n            modal: {\r\n                update: this.state.modal.update,\r\n                header: this.state.modal.header,\r\n                data: { [e.target.name]: e.target.value },\r\n            }\r\n        })\r\n        this.state.modal.data[e.target.name] = value;\r\n    }\r\n    showDetails(item) {\r\n        this.selectedData = item;\r\n        this.setState({\r\n            modal: {\r\n                data: item,\r\n                update: true,\r\n                header: \"Node Details\"\r\n            }\r\n        })\r\n        this.handalShow();\r\n    }\r\n    saveNode() {\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            body: JSON.stringify([{\r\n                node_id: this.state.nodes[0].node_id,\r\n                description: this.state.nodes[0].description,\r\n                zipcode: this.state.nodes[0].zipcode,\r\n                longitude: this.state.nodes[0].latitude,\r\n                latitude: this.state.nodes[0].longitude,\r\n                is_shipping_enabled: this.state.nodes[0].is_shipping_enabled,\r\n                is_pickup_enabled: this.state.nodes[0].is_pickup_enabled,\r\n                is_shut_down: this.state.nodes[0].is_shut_down,\r\n                is_active: this.state.nodes[0].is_active,\r\n                org_code: 'PERF_DEFAULT'\r\n            }]),\r\n\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Accept: 'application/json',\r\n            }\r\n\r\n        };\r\n        fetch('http://localhost:8084/sourcing/v1/shipnode', requestOptions)\r\n            .then(response => {\r\n                const isJson = response.headers.get('content-type')?.includes('application/json');\r\n                const data = isJson && response.json();\r\n\r\n                // check for error response\r\n                if (!response.ok) {\r\n                    // get error message from body or default to response status\r\n                    const error = (data && data.message) || response.status;\r\n                    console.log(error.response)\r\n                    return Promise.reject(error);\r\n                } else {\r\n                    this.handalClose();\r\n                }\r\n            })\r\n            .catch(error => {\r\n                this.setState({ errorMessage: error.toString() });\r\n                console.error('There was an error!', error);\r\n            });\r\n        // this.handalClose();\r\n    }\r\n   \r\n    render() {\r\n        return (\r\n            <div className='sourcing'>\r\n                {this.state.loading && <Spinner />}\r\n                <Card className='text'>\r\n                    <Card.Header>Sourcing Nodes</Card.Header>\r\n                <div style={{ height: 600, width: '95%' }}>\r\n                    {this.state.nodes.length > 0 && \r\n                        <DataGrid getRowId={(row) => row.node_id} rows={this.state.nodes} columns={nodeColumns} \r\n                        pageSize={10} autoPageSize={true} checkboxSelection={false} \r\n                        editRowsModel={true} onRowClick={(row) => this.showDetails(row.row)} resizable={true}\r\n                        // getCellClassName={(row) => this.updateNodeValuesForDisplay(row)}/>}\r\n                        cellRender={(params) => {\r\n                            if (params.field === 'is_active') {\r\n                                return params.value = true ? '&#x2714;' : '&#x2718;';\r\n                            }\r\n                            \r\n                          }}/>}\r\n                        {/*   */}\r\n                </div>\r\n                </Card>\r\n                <Modal size=\".5g\"\r\n                    aria-labelledby=\"contained-modal-title-vcenter\"\r\n                    centered\r\n                    show={this.state.show} onHide={() => this.handalClose()}>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>{this.state.modal.header}</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <Row className='margin3p'>\r\n                            <Col >\r\n                                <label>Node ID</label>\r\n                            </Col>\r\n                            <Col>\r\n                                <input className='custom-inputbox ' type=\"text\" name=\"node_id\" value={this.state.modal.data.node_id} onChange={this.onChangeHandler} />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className='margin3p'>\r\n                            <Col >\r\n                                <label>Description</label>\r\n                            </Col>\r\n                            <Col>\r\n                                <input className='custom-inputbox ' type=\"text\" name=\"description\" value={this.state.modal.data.description} onChange={this.onChangeHandler} />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className='margin3p'>\r\n                            <Col >\r\n                                <label>ZipCode</label>\r\n                            </Col>\r\n                            <Col>\r\n                                <input className='custom-inputbox' type=\"text\" name=\"zipcode\" value={this.state.modal.data.zipcode} onChange={this.onChangeHandler} />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className='margin3p'>\r\n                            <Col >\r\n                                <label>Latitude</label>\r\n                            </Col>\r\n                            <Col>\r\n                                <input className='custom-inputbox' type=\"text\" name=\"latitude\" value={this.state.modal.data.latitude} onChange={this.onChangeHandler} />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className='margin3p'>\r\n                            <Col >\r\n                                <label>Longitude</label>\r\n                            </Col>\r\n                            <Col>\r\n                                <input className='custom-inputbox' type=\"text\" name=\"longitude\" value={this.state.modal.data.longitude} onChange={this.onChangeHandler} />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className='margin3p'>\r\n                            <Col >\r\n                                <label>Shipping Enabled</label>\r\n                            </Col>\r\n                            <Col>\r\n                                <input className='custom-file custom-checkbox-small' type=\"checkbox\" name=\"is_shipping_enabled\"\r\n                                    defaultChecked={this.state.modal.data.is_shipping_enabled}\r\n                                    value={this.state.modal.data.is_shipping_enabled}\r\n                                    onChange={this.onChangeHandler} />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className='margin3p'>\r\n                            <Col >\r\n                                <label>Pickup Enabled</label>\r\n                            </Col>\r\n                            <Col>\r\n                                <input className='custom-file custom-checkbox-small' type=\"checkbox\" name=\"is_pickup_enabled\"\r\n                                    defaultChecked={this.state.modal.data.is_pickup_enabled}\r\n                                    value={this.state.modal.data.is_pickup_enabled}\r\n                                    onChange={this.onChangeHandler} />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className='margin3p'>\r\n                            <Col >\r\n                                <label>Shutdown</label>\r\n                            </Col>\r\n                            <Col>\r\n                                <input className='custom-file custom-checkbox-small' type=\"checkbox\" name=\"is_shut_down\"\r\n                                    defaultChecked={this.state.modal.data.is_shut_down}\r\n                                    value={this.state.modal.data.is_shut_down}\r\n                                    onChange={this.onChangeHandler} />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className='margin3p'>\r\n                            <Col >\r\n                                <label>Is Active</label>\r\n                            </Col>\r\n                            <Col>\r\n                                <input className='custom-file custom-checkbox-small' type=\"checkbox\" name=\"is_active\"\r\n                                    defaultChecked={this.state.modal.data.is_active}\r\n                                    value={this.state.modal.data.is_active}\r\n                                    onChange={this.onChangeHandler} />\r\n                            </Col>\r\n                        </Row>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        {this.state.modal.update && <Button className='margin1p custom-btn-small' onClick={() => this.updateNode()}>Update</Button>}\r\n                        {this.state.modal.update && <Button className='margin1p custom-btn-small' onClick={() => this.deleteNode()}>Delete</Button>}\r\n                        {!this.state.modal.update && <Button className='margin1p custom-btn-small' onClick={() => this.saveNode()}>Save</Button>}\r\n                        <Button className='margin1p custom-btn-small' onClick={() => this.handalClose()}>Close</Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}","D:\\React\\react-training\\react-sourcing-proj\\src\\pages\\sourcing\\Sourcingrules.js",["106","107","108","109"],"import React, { Component } from 'react'\r\nimport { API } from '../../utils';\r\nimport './sourcing.css';\r\nimport { Card, Button, Row, Col, Table, Modal } from 'react-bootstrap';\r\nimport { Spinner } from '../../components/Spinner';\r\nimport { GridColumn } from 'semantic-ui-react';\r\n\r\nexport class Sourcingrules extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            loading: false,\r\n            show: false,\r\n            searchOrg: \"\",\r\n            sourcingRules: [],\r\n            details : [],\r\n            selectedData:[]\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        this.searchSourcingRule();\r\n    }\r\n    searchSourcingRule() {\r\n        fetch(\"http://localhost:8084/sourcing/v1/getSourcingSequence?sourcingRuleId=STH_KA_BANGALORE&orgCode=PERF_DEFAULT\",\r\n            {\r\n                method: 'GET',\r\n                headers: {\r\n                    mode: 'no-cors',\r\n                    Accept: 'application/json',\r\n                    'Access-Control-Allow-Origin': '*',\r\n                    Host:'example.com',\r\n                    Origin:'http://localhost:3000/',\r\n                    'Content-Type': 'application/json',\r\n                    'Access-Control-Allow-Methods':'GET, POST',                    \r\n                },\r\n            })\r\n            .then(res => res.json())\r\n            .then(result => {\r\n                    console.log(\"get call is successful\" +result);\r\n                    this.setState({sourcingRules: [result]})\r\n                    this.setState({details: [result]})\r\n\r\n            })\r\n            .catch(error => console.log(error))\r\n    }\r\n    onChangeHandlerForSearchParam= e => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n    openRuleDetailsFun(item) {\r\n        this.props.openRuleDetailsFun(item);\r\n    }\r\n    addSourcingRule() { }\r\n    deleteSourcingRule() { }\r\n    onSort(event, sortKey){\r\n        const data = this.state.sourcingRules;\r\n        data.sort((a,b) => a[sortKey].localeCompare(b[sortKey]))\r\n        this.setState({sourcingRules:data})\r\n      }\r\n    render() {\r\n        return (\r\n            <div className='sourcing'>\r\n                {this.state.loading && <Spinner />}\r\n                <Card className='text'>\r\n                    <Card.Header className=\"disp-Inline-Flex\">Sourcing Rules\r\n                        <input onChange={this.onChangeHandlerForSearchParam} name=\"searchOrg\" value={this.state.searchOrg} className=\"searchField offset-7\" type=\"text\" placeholder=\"Org Code\" />\r\n                        <Button className='searchField ml-xl-2' size=\"sm\" variant=\"primary\" onClick={() => this.searchSourcingRule()}>Search</Button>\r\n                    </Card.Header>\r\n                    <Card.Body >\r\n                        <Table striped bordered hover>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th onClick={e => this.onSort(e, 'ruleid')}>Sourcing Rule ID</th>\r\n                                    <th onClick={e => this.onSort(e, 'ruledesc')}>Rule Description</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {/* {this.state.data = this.state.sourcingRules} */}\r\n                                {this.state.sourcingRules.map((item, index) => {\r\n                                    \r\n                                    return (\r\n                                        <tr  key={index} onClickCapture={() => this.openRuleDetailsFun(item)} >\r\n                                            <td>{item.sourcing_rule_id}</td>\r\n                                            <td>{item.sourcing_rule_description}</td>\r\n                                        </tr>\r\n                                    );\r\n                                })}\r\n                            </tbody>\r\n                        </Table>\r\n                        <Row>\r\n                            <Button className='margin2p custom-btn-medium' size=\"sm\" onClick={() => this.addSourcingRule()}>Add</Button>\r\n                            <Button className='margin2p custom-btn-medium' size=\"sm\" onClick={() => this.deleteSourcingRule()}>Delete</Button>\r\n                        </Row>\r\n                    </Card.Body>\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n}","D:\\React\\react-training\\react-sourcing-proj\\src\\pages\\Home.js",[],"D:\\React\\react-training\\react-sourcing-proj\\src\\pages\\Reports.js",[],"D:\\React\\react-training\\react-sourcing-proj\\src\\pages\\sourcing\\sourcingconfig.js",[],"D:\\React\\react-training\\react-sourcing-proj\\src\\utils.js",[],"D:\\React\\react-training\\react-sourcing-proj\\src\\pages\\sourcing\\Sourcinruledetails.js",["110","111","112","113"],"D:\\React\\react-training\\react-sourcing-proj\\src\\pages\\sourcing\\SourcingRuleSeqDetails.js",["114","115"],"import React, { Component } from 'react'\r\nimport { API } from '../../utils';\r\nimport './sourcing.css';\r\nimport { Card, Button, Row, Col, Table, Modal } from 'react-bootstrap';\r\nimport { Spinner } from '../../components/Spinner';\r\n// import { MDBCol, MDBIcon } from \"mdbreact\";\r\n// import { FaBeer } from \"@react-icons/all-files/fa/FaBeer\";\r\n\r\n\r\nexport class SourcingRuleSeqDetails extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            ruleDetailsScreen: false,\r\n            ruleListScreen: true,\r\n            show: false,\r\n            seqDetails: {},\r\n            noSelCriteria: [],\r\n            NodeList: [],\r\n            group_config: {},\r\n            seqDetails: this.props.displayData.sequences\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.setState({\r\n            seqDetails: this.props.displayData.sequences\r\n        })\r\n    }\r\n    setdata() {\r\n        this.setState({\r\n            noSelCriteria: this.state.seqDetails.node_selection_criteria,\r\n            NodeList: this.state.seqDetails.node_list,\r\n            group_config: this.state.seqDetails.group_config\r\n        })\r\n    }\r\n    onChangeHandlerGroupConfig = e => {\r\n        this.setState({\r\n            [e.target.name]: e.target.defaultChecked\r\n        })\r\n    }\r\n\r\n    handalClose() {\r\n        this.setState({\r\n            show: false\r\n        })\r\n    }\r\n    handalShow() {\r\n        this.setState({\r\n            show: true\r\n        })\r\n    }\r\n    onChangeHandler(e) { }\r\n    addCriteria() { }\r\n    save() { }\r\n    goBackToDetailsScreen() {\r\n        this.props.openRuleDetailsFun(this.props.displayData);\r\n    }\r\n    addNode() {\r\n        // this.selectedData=item;\r\n        this.setState({\r\n            modal: {\r\n                // data: item,\r\n                show: true,\r\n                update: true,\r\n                header: \"Node Details\"\r\n            }\r\n        })\r\n        this.handalShow();\r\n    }\r\n    render() {\r\n        return (\r\n            <div className='sourcing'>\r\n                {this.state.loading && <Spinner />}\r\n                <Modal size=\".5g\"\r\n                    aria-labelledby=\"contained-modal-title-vcenter\"\r\n                    centered\r\n                    show={this.state.show} onHide={() => this.handalClose()}>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Add Node</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <Row className='margin2p'>\r\n                            <Col className='col-3 mt-md-1'>\r\n                                <label className=\"margin2p\">Organization Code: </label>\r\n                            </Col>\r\n                            <Col>\r\n                                <input className=\"margin2p\" type=\"text\" name=\"org_code\" onChange={this.onChangeHandler} />\r\n                                <Button className='margin1p custom-btn'>Search</Button>\r\n                                {/* <TextField defaultValue=\"Search Org\"/> */}\r\n                                {/* <FaBeer /> */}\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className='margin3p mt-md-2'>\r\n                            <Col className='col-1'>\r\n                                <input className='custom-file custom-checkbox-small2' type=\"checkbox\" name=\"is_shipping_enabled\"\r\n                                    defaultChecked={true}\r\n                                    value={true}\r\n                                />\r\n                            </Col>\r\n                            <Col className='col-3'>\r\n                                <label>Shipping Enabled</label>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className='margin3p'>\r\n                            <Col className='col-1'>\r\n                                <input className='custom-file custom-checkbox-small2' type=\"checkbox\" name=\"is_shipping_enabled\"\r\n                                    defaultChecked={true}\r\n                                    value={false}\r\n                                />\r\n                            </Col>\r\n                            <Col >\r\n                                <label>Pickup Enabled</label>\r\n                            </Col>\r\n                        </Row>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        {<Button className='margin1p custom-btn-small' onClick={() => this.deleteNode()}>Add</Button>}\r\n                        <Button className='margin1p custom-btn-small' onClick={() => this.handalClose()}>Close</Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n                {this.state.seqDetails.map((seq, index) => {\r\n                    return (\r\n                        <Card key={index} className='text'>\r\n                            <Card.Header >Sourcing Sequence Details</Card.Header>\r\n                            <Card.Body>\r\n                                <Table>\r\n                                    <tr>\r\n                                        <th>\r\n                                            <label className='margin2p disp-Inline-Flex'>Sequence No: </label>\r\n                                        </th>\r\n                                        <th>\r\n                                            <input class=\"margin2p\" type=\"text\" name=\"seq_no\" value={seq.seq_no} onChange={this.onChangeHandler} />\r\n                                        </th>\r\n                                        <th>\r\n                                            <label className='margin2p disp-Inline-Flex'>Sequence Description: </label>\r\n                                        </th>\r\n                                        <th>\r\n                                            <input class=\"margin2p\" type=\"text\" name=\"seq_description\" value={seq.seq_description} onChange={this.onChangeHandler} />\r\n                                        </th>\r\n                                    </tr>\r\n                                </Table>\r\n                                <Row>\r\n                                    <Col>\r\n                                        <Card.Header><label className='margin2p'>Node Sequences Criteria :</label></Card.Header>\r\n                                        <Card className=\"node-seq-criteria\">\r\n                                            <Card.Body>\r\n                                                <Button className='custom-btn-small margin2p offset-9' onClick={() => this.addCriteria()}>Add Criteria</Button>\r\n                                                {seq.node_selection_criteria.map((nodeSelCrit, index) => {\r\n                                                    return (\r\n                                                        <Card key={index} className=\"w-100 mt-md-3\">\r\n                                                            <Row className='margin2p'>\r\n                                                                <Col className=\"inline-grid\">\r\n                                                                    <label className='margin2p disp-Inline-Flex'>Name : </label>\r\n                                                                    <label className='margin2p disp-Inline-Flex'>Query Type : </label>\r\n                                                                    <label className='margin2p disp-Inline-Flex'>Value : </label>\r\n                                                                    <label className='margin2p disp-Inline-Flex'>UOM : </label>\r\n                                                                </Col>\r\n                                                                <Col className=\"inline-grid\">\r\n                                                                    <input type=\"text\" className=\"margin2p\" name=\"parameter_name\" value={nodeSelCrit.parameter_name} onChange={this.onChangeHandler} />\r\n                                                                    <input type=\"text\" className=\"margin2p\" name=\"query_type\" value={nodeSelCrit.query_type} onChange={this.onChangeHandler} />\r\n                                                                    <input type=\"text\" className=\"margin2p\" name=\"parameter_value\" value={nodeSelCrit.parameter_value} onChange={this.onChangeHandler} />\r\n                                                                    <input type=\"text\" className=\"margin2p\" name=\"parameter_uom\" value={nodeSelCrit.parameter_uom} onChange={this.onChangeHandler} />\r\n                                                                </Col>\r\n                                                            </Row>\r\n                                                        </Card>);\r\n                                                })}\r\n                                            </Card.Body>\r\n                                        </Card>\r\n                                    </Col>\r\n                                    <Col>\r\n                                        <Card.Header><label className='margin2p'>Nodes</label></Card.Header>\r\n                                        <Card className=\"node-seq-criteria\">\r\n                                            <Card.Body>\r\n                                                <Button className='margin2p custom-btn-small offset-9' variant=\"primary\" onClick={() => this.addNode()}>Add Node</Button>\r\n                                                <Table striped bordered hover className=\" mt-md-3\">\r\n\r\n                                                    <thead>\r\n                                                        <tr className='margin2p text-center'>\r\n                                                            <th>Node ID</th>\r\n                                                            <th>Shipping Enabled</th>\r\n                                                            <th>Pickup Enabled</th>\r\n                                                        </tr>\r\n                                                    </thead>\r\n                                                    <tbody>\r\n                                                        {seq.node_list.map((node, index) => {\r\n                                                            return (\r\n                                                                <tr className='text-center' >\r\n                                                                    <td>{node.node_id}</td>\r\n                                                                    <td>{node.is_shipping_enabled.toString() === 'true' ? \"✔\" : \"✘\"}</td>\r\n                                                                    <td>{node.is_pickup_enabled.toString() === 'true' ? \"✔\" : \"✘\"}</td>\r\n                                                                </tr>\r\n                                                            );\r\n                                                        })}\r\n                                                    </tbody>\r\n                                                </Table>\r\n                                            </Card.Body>\r\n                                        </Card>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col>\r\n                                    <Card.Header><label>Group Configuration :</label></Card.Header>\r\n                                        <Card>\r\n                                            <Card.Body>\r\n                                                <Row className='margin2p field is-horizontal'>\r\n                                                    <tr>\r\n                                                        <Col className=\"inline-grid\">\r\n                                                            <th>\r\n                                                                <input type=\"checkbox\" name=\"is_shipping_enabled\"\r\n                                                                    defaultChecked={seq.group_config.is_shipping_enabled}\r\n                                                                    value={seq.group_config.is_shipping_enabled}\r\n                                                                    onChange={this.onChangeHandlerGroupConfig} />\r\n                                                            </th>\r\n                                                            <th><label className='margin2p'>Shipinng Enabled </label></th>\r\n                                                        </Col>\r\n                                                        <Col className=\"inline-grid\">\r\n                                                            <th>\r\n                                                                <input type=\"checkbox\" name=\"is_pickup_enabled\"\r\n                                                                    defaultChecked={seq.group_config.is_pickup_enabled}\r\n                                                                    value={seq.group_config.is_pickup_enabled}\r\n                                                                    onChange={this.onChangeHandlerGroupConfig} />\r\n                                                            </th>\r\n                                                            <th><label className='margin2p'>Pickup Enabled </label></th>\r\n                                                        </Col>\r\n                                                        <Button className='custom-btn-medium offset-8' variant=\"primary\" onClick={() => this.save()}>Save</Button>\r\n                                                        <Button className='custom-btn-medium ml-xl-1' variant=\"primary\" onClick={() => this.goBackToDetailsScreen()}>Go Back</Button>\r\n                                                    </tr>\r\n                                                </Row>\r\n                                            </Card.Body>\r\n                                        </Card>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    );\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n}","D:\\React\\react-training\\react-sourcing-proj\\src\\components\\SidebarData.js",[],"D:\\React\\react-training\\react-sourcing-proj\\src\\components\\SubMenu.js",[],"D:\\React\\react-training\\react-sourcing-proj\\src\\components\\SearchBar.js",["116"],"import React from 'react';\r\nimport * as AiIcons from 'react-icons/ai';\r\nconst SearchBar = () => {\r\n    const handleSearch = (e) =>{\r\n        \r\n           // this.setState({searchField:e.target.value})\r\n         // set State Params\r\n        console.log(e.target.value)\r\n          };\r\n   \r\n      return (\r\n        <div >\r\n          \r\n            <input\r\n            className=\"searchBar \"\r\n             type='search'\r\n              placeholder=\"Search text here\"\r\n              onChange = {handleSearch}\r\n              \r\n            />\r\n           \r\n             \r\n        \r\n         \r\n          </div>\r\n          \r\n      );\r\n    \r\n  };\r\n\r\n  export default SearchBar;","D:\\React\\react-training\\react-sourcing-proj\\src\\components\\Spinner.js",[],"D:\\React\\react-training\\react-sourcing-proj\\src\\components\\Chart.js",["117","118"],"import React, {Component} from 'react';\nimport {Bar, Line, Pie} from 'react-chartjs-2';\nimport './Chart.css';\n\nclass Chart extends Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      chartData:props.chartData\n    }\n  }\n\n  static defaultProps = {\n    displayTitle:true,\n    displayLegend: true,\n    legendPosition:'right',\n    Enterprise:'City'\n  }\n\n  render(){\n    return (\n      <div className=\"countrylist\">\n        <div className=\"country\">\n        <Bar\n          data={this.state.chartData}\n          \n  options={{ maintainAspectRatio: false }}\n        />\n        </div>\n        </div>\n    )\n  }\n}\n\nexport default Chart;\n","D:\\React\\react-training\\react-sourcing-proj\\src\\components\\Animation.js",[],"D:\\React\\react-training\\react-sourcing-proj\\src\\components\\Accordion.js",[],{"ruleId":"119","replacedBy":"120"},{"ruleId":"121","replacedBy":"122"},{"ruleId":"123","severity":1,"message":"124","line":6,"column":10,"nodeType":"125","messageId":"126","endLine":6,"endColumn":17},{"ruleId":"123","severity":1,"message":"127","line":6,"column":19,"nodeType":"125","messageId":"126","endLine":6,"endColumn":29},{"ruleId":"123","severity":1,"message":"128","line":6,"column":31,"nodeType":"125","messageId":"126","endLine":6,"endColumn":41},{"ruleId":"123","severity":1,"message":"129","line":2,"column":10,"nodeType":"125","messageId":"126","endLine":2,"endColumn":13},{"ruleId":"130","severity":1,"message":"131","line":44,"column":27,"nodeType":"132","messageId":"133","endLine":44,"endColumn":29},{"ruleId":"130","severity":1,"message":"131","line":45,"column":27,"nodeType":"132","messageId":"133","endLine":45,"endColumn":29},{"ruleId":"130","severity":1,"message":"131","line":46,"column":27,"nodeType":"132","messageId":"133","endLine":46,"endColumn":29},{"ruleId":"123","severity":1,"message":"134","line":10,"column":8,"nodeType":"125","messageId":"126","endLine":10,"endColumn":17},{"ruleId":"123","severity":1,"message":"129","line":2,"column":10,"nodeType":"125","messageId":"126","endLine":2,"endColumn":13},{"ruleId":"123","severity":1,"message":"135","line":4,"column":34,"nodeType":"125","messageId":"126","endLine":4,"endColumn":39},{"ruleId":"130","severity":1,"message":"131","line":165,"column":27,"nodeType":"132","messageId":"133","endLine":165,"endColumn":29},{"ruleId":"136","severity":1,"message":"137","line":173,"column":13,"nodeType":"138","messageId":"139","endLine":173,"endColumn":32},{"ruleId":"136","severity":1,"message":"137","line":184,"column":9,"nodeType":"138","messageId":"139","endLine":184,"endColumn":30},{"ruleId":"123","severity":1,"message":"129","line":2,"column":10,"nodeType":"125","messageId":"126","endLine":2,"endColumn":13},{"ruleId":"123","severity":1,"message":"140","line":4,"column":29,"nodeType":"125","messageId":"126","endLine":4,"endColumn":32},{"ruleId":"123","severity":1,"message":"141","line":4,"column":41,"nodeType":"125","messageId":"126","endLine":4,"endColumn":46},{"ruleId":"123","severity":1,"message":"142","line":6,"column":10,"nodeType":"125","messageId":"126","endLine":6,"endColumn":20},{"ruleId":"123","severity":1,"message":"129","line":2,"column":10,"nodeType":"125","messageId":"126","endLine":2,"endColumn":13},{"ruleId":"123","severity":1,"message":"140","line":4,"column":29,"nodeType":"125","messageId":"126","endLine":4,"endColumn":32},{"ruleId":"123","severity":1,"message":"141","line":4,"column":41,"nodeType":"125","messageId":"126","endLine":4,"endColumn":46},{"ruleId":"123","severity":1,"message":"143","line":4,"column":48,"nodeType":"125","messageId":"126","endLine":4,"endColumn":57},{"ruleId":"123","severity":1,"message":"129","line":2,"column":10,"nodeType":"125","messageId":"126","endLine":2,"endColumn":13},{"ruleId":"144","severity":1,"message":"145","line":21,"column":13,"nodeType":"146","messageId":"133","endLine":21,"endColumn":23},{"ruleId":"123","severity":1,"message":"147","line":2,"column":13,"nodeType":"125","messageId":"126","endLine":2,"endColumn":20},{"ruleId":"123","severity":1,"message":"148","line":2,"column":14,"nodeType":"125","messageId":"126","endLine":2,"endColumn":18},{"ruleId":"123","severity":1,"message":"149","line":2,"column":20,"nodeType":"125","messageId":"126","endLine":2,"endColumn":23},"no-native-reassign",["150"],"no-negated-in-lhs",["151"],"no-unused-vars","'Reports' is defined but never used.","Identifier","unusedVar","'ReportsOne' is defined but never used.","'ReportsTwo' is defined but never used.","'API' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'SearchBar' is defined but never used.","'Table' is defined but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","noDirectMutation","'Col' is defined but never used.","'Modal' is defined but never used.","'GridColumn' is defined but never used.","'Container' is defined but never used.","no-dupe-keys","Duplicate key 'seqDetails'.","ObjectExpression","'AiIcons' is defined but never used.","'Line' is defined but never used.","'Pie' is defined but never used.","no-global-assign","no-unsafe-negation"]